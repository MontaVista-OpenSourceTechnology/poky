From d104cfb81f83cd1168fc0543ed9fde45d1891f04 Mon Sep 17 00:00:00 2001
From: Vijay Anusuri <vanusuri@mvista.com>
Date: Fri, 11 Nov 2022 06:23:39 +0000
Subject: [PATCH] CVE-2022-43680

lib: Fix overeager DTD destruction in XML_ExternalEntityParserCreate

tests: Cover overeager DTD destruction in XML_ExternalEntityParserCreate

Upstream-Status: Backport [https://github.com/libexpat/libexpat/commit/5290462a7ea1278a8d5c0d5b2860d4e244f997e4 && https://github.com/libexpat/libexpat/commit/43992e4ae25fc3dc0eec0cd3a29313555d56aee2]
CVE: CVE-2022-43680
Signed-off-by: Vijay Anusuri <vanusuri@mvista.com>
---
 lib/xmlparse.c   |  8 ++++++++
 tests/runtests.c | 49 ++++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 57 insertions(+)

diff --git a/lib/xmlparse.c b/lib/xmlparse.c
index 7c2ac61..230ccbd 100644
--- a/lib/xmlparse.c
+++ b/lib/xmlparse.c
@@ -1086,6 +1086,14 @@ parserCreate(const XML_Char *encodingName,
   parserInit(parser, encodingName);
 
   if (encodingName && !protocolEncodingName) {
+    if (dtd) {
+      // We need to stop the upcoming call to XML_ParserFree from happily
+      // destroying _dtd because the DTD is shared with the parent
+      // parser and the only guard that keeps XML_ParserFree from destroying
+      // _dtd is isParamEntity but it will be set to
+      // XML_TRUE only later in XML_ExternalEntityParserCreate (or not at all).
+      _dtd = NULL;
+    }
     XML_ParserFree(parser);
     return NULL;
   }
diff --git a/tests/runtests.c b/tests/runtests.c
index 751ae1f..4aa32f6 100644
--- a/tests/runtests.c
+++ b/tests/runtests.c
@@ -10290,6 +10290,53 @@ START_TEST(test_alloc_long_notation)
 END_TEST
 
 
+static int XMLCALL
+external_entity_parser_create_alloc_fail_handler(XML_Parser parser,
+                                                 const XML_Char *context,
+                                                 const XML_Char *base,
+                                                 const XML_Char *systemId,
+                                                 const XML_Char *publicId) {
+  UNUSED_P(base);
+  UNUSED_P(systemId);
+  UNUSED_P(publicId);
+
+  if (context != NULL)
+    fail("Unexpected non-NULL context");
+
+  // The following number intends to fail the upcoming allocation in line
+  // "protocolEncodingName = copyString(encodingName,
+  // &(parser->m_mem));" in function parserInit.
+  allocation_count = 3;
+
+  const XML_Char *const encodingName = XCS("UTF-8"); // needs something non-NULL
+  const XML_Parser ext_parser
+      = XML_ExternalEntityParserCreate(parser, context, encodingName);
+  if (ext_parser != NULL)
+    fail(
+        "Call to XML_ExternalEntityParserCreate was expected to fail out-of-memory");
+
+  allocation_count = ALLOC_ALWAYS_SUCCEED;
+  return XML_STATUS_ERROR;
+}
+
+START_TEST(test_alloc_reset_after_external_entity_parser_create_fail) {
+  const char *const text = "<!DOCTYPE doc SYSTEM 'foo'><doc/>";
+
+  XML_SetExternalEntityRefHandler(
+      g_parser, external_entity_parser_create_alloc_fail_handler);
+  XML_SetParamEntityParsing(g_parser, XML_PARAM_ENTITY_PARSING_ALWAYS);
+
+  if (XML_Parse(g_parser, text, (int)strlen(text), XML_TRUE)
+      != XML_STATUS_ERROR)
+    fail("Call to parse was expected to fail");
+
+  if (XML_GetErrorCode(g_parser) != XML_ERROR_EXTERNAL_ENTITY_HANDLING)
+    fail("Call to parse was expected to fail from the external entity handler");
+
+  XML_ParserReset(g_parser, NULL);
+}
+END_TEST
+
 static void
 nsalloc_setup(void)
 {
@@ -12105,6 +12152,8 @@ make_suite(void)
     tcase_add_test(tc_alloc, test_alloc_long_public_id);
     tcase_add_test(tc_alloc, test_alloc_long_entity_value);
     tcase_add_test(tc_alloc, test_alloc_long_notation);
+    tcase_add_test__ifdef_xml_dtd(
+        tc_alloc, test_alloc_reset_after_external_entity_parser_create_fail);
 
     suite_add_tcase(s, tc_nsalloc);
     tcase_add_checked_fixture(tc_nsalloc, nsalloc_setup, nsalloc_teardown);
-- 
2.18.2

