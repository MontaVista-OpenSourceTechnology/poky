From 901d26daf3b39ec9e4339932fae476c9828da798 Mon Sep 17 00:00:00 2001
From: Vijay Anusuri <vanusuri@mvista.com>
Date: Wed, 16 Nov 2022 09:41:12 +0000
Subject: [PATCH] fixup! Allow fuzz builds to detect string overruns

Upstream-Status: Backport [https://debian.sipwise.com/debian-security/pool/main/o/openssl1.0/openssl1.0_1.0.2u-1~deb9u6.debian.tar.xz]
CVE: CVE-2021-3712
Signed-off-by: Vijay Anusuri <vanusuri@mvista.com>
---
 crypto/asn1/asn1_lib.c | 18 ++++++++++--------
 1 file changed, 10 insertions(+), 8 deletions(-)

diff --git a/crypto/asn1/asn1_lib.c b/crypto/asn1/asn1_lib.c
index 4bed75b..f7bd6d4 100644
--- a/crypto/asn1/asn1_lib.c
+++ b/crypto/asn1/asn1_lib.c
@@ -374,8 +374,14 @@ int ASN1_STRING_set(ASN1_STRING *str, const void *_data, int len)
         c = str->data;
         if (c == NULL)
             str->data = OPENSSL_malloc(len + 1);
-        else
+        else {
+#ifdef FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION
+            /* No NUL terminator in fuzzing builds */
+            str->data = OPENSSL_realloc(c, len);
+#else
             str->data = OPENSSL_realloc(c, len + 1);
+#endif
+        }
 
         if (str->data == NULL) {
             ASN1err(ASN1_F_ASN1_STRING_SET, ERR_R_MALLOC_FAILURE);
@@ -386,15 +392,11 @@ int ASN1_STRING_set(ASN1_STRING *str, const void *_data, int len)
     str->length = len;
     if (data != NULL) {
         memcpy(str->data, data, len);
-        /* an allowance for strings :-) */
-#ifdef FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION
+#ifndef FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION
         /*
-         * Arbitrary byte on the end, which should never be read if the string
-         * length is being properly respected.
+         * Add a NUL terminator. This should not be necessary - but we add it as
+         * a safety precaution
          */
-        str->data[len] = 'x';
-#else
-        /* This should not be necessary - but we add it as a safety precaution */
         str->data[len] = '\0';
 #endif
     }
-- 
2.18.2

