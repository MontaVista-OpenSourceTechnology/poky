From 48442a2056703c59279a42da3146695911fd0d76 Mon Sep 17 00:00:00 2001
From: Hitendra Prajapati <hprajapati@mvista.com>
Date: Mon, 13 Dec 2021 11:04:36 +0530
Subject: [PATCH] CVE-2016-20012

Upstream-Status: Backport from https://github.com/manfred-kaiser/openssh-portable/commit/9901230649bbc970b442d589692b48bbfdfdfa36

Signed-off-by: Hitendra Prajapati <hprajapati@mvista.com>
---
 auth2-pubkey.c |  5 ++++
 readconf.c     | 68 ++++++++++++++++++++++++++++++++++++++++++--------
 readconf.h     |  2 ++
 scp.1          |  1 +
 servconf.c     | 12 ++++++++-
 servconf.h     |  1 +
 sftp.1         |  1 +
 ssh.1          |  1 +
 ssh.c          |  4 +--
 ssh_config     |  1 +
 ssh_config.5   | 12 +++++++++
 sshconnect2.c  |  2 +-
 sshd_config    |  2 +-
 sshd_config.5  |  5 ++++
 14 files changed, 101 insertions(+), 16 deletions(-)

diff --git a/auth2-pubkey.c b/auth2-pubkey.c
index 1bcf021..8203b41 100644
--- a/auth2-pubkey.c
+++ b/auth2-pubkey.c
@@ -204,6 +204,11 @@ userauth_pubkey(Authctxt *authctxt)
 		 * if a user is not allowed to login. is this an
 		 * issue? -markus
 		 */
+               if (options.pubkey_disable_pk_check) {
+			debug("SSH_MSG_USERAUTH_REQUEST without signature are forbidden");
+			goto done;
+		}
+
 		if (PRIVSEP(user_key_allowed(authctxt->pw, key, 0))) {
 			packet_start(SSH2_MSG_USERAUTH_PK_OK);
 			packet_put_string(pkalg, alen);
diff --git a/readconf.c b/readconf.c
index 9d59493..998cfe0 100644
--- a/readconf.c
+++ b/readconf.c
@@ -153,7 +153,7 @@ typedef enum {
 	oBatchMode, oCheckHostIP, oStrictHostKeyChecking, oCompression,
 	oCompressionLevel, oTCPKeepAlive, oNumberOfPasswordPrompts,
 	oUsePrivilegedPort, oLogLevel, oCiphers, oProtocol, oMacs,
-	oPubkeyAuthentication,
+	oPubkeyAuthentication, oPubkeyDisablePKCheck,
 	oKbdInteractiveAuthentication, oKbdInteractiveDevices, oHostKeyAlias,
 	oDynamicForward, oPreferredAuthentications, oHostbasedAuthentication,
 	oHostKeyAlgorithms, oBindAddress, oPKCS11Provider,
@@ -230,6 +230,7 @@ static struct {
 	{ "kbdinteractiveauthentication", oKbdInteractiveAuthentication },
 	{ "kbdinteractivedevices", oKbdInteractiveDevices },
 	{ "pubkeyauthentication", oPubkeyAuthentication },
+	{ "pubkeydisablepkcheck", oPubkeyDisablePKCheck},
 	{ "dsaauthentication", oPubkeyAuthentication },		    /* alias */
 	{ "hostbasedauthentication", oHostbasedAuthentication },
 	{ "challengeresponseauthentication", oChallengeResponseAuthentication },
@@ -961,6 +962,10 @@ parse_time:
 		intptr = &options->rhosts_rsa_authentication;
 		goto parse_flag;
 
+	case oPubkeyDisablePKCheck:
+		intptr = &options->pubkey_disable_pk_check;
+		goto parse_flag;
+
 	case oHostbasedAuthentication:
 		intptr = &options->hostbased_authentication;
 		goto parse_flag;
@@ -1582,11 +1587,23 @@ parse_keytypes:
 
 	case oCanonicalizePermittedCNAMEs:
 		value = options->num_permitted_cnames != 0;
+		i = 0;
 		while ((arg = strdelim(&s)) != NULL && *arg != '\0') {
-			/* Either '*' for everything or 'list:list' */
-			if (strcmp(arg, "*") == 0)
+			/*
+			 * Either 'none' (only in first position), '*' for
+			 * everything or 'list:list'
+			 */
+			if (strcasecmp(arg, "none") == 0) {
+				if (i > 0) {
+					error("%s line %d: keyword %s \"none\" "
+					    "argument must appear alone.",
+					    filename, linenum, keyword);
+
+				}
+				arg2 = "";
+			} else if (strcmp(arg, "*") == 0) {
 				arg2 = arg;
-			else {
+			} else {
 				lowercase(arg);
 				if ((arg2 = strchr(arg, ':')) == NULL ||
 				    arg2[1] == '\0') {
@@ -1597,6 +1614,7 @@ parse_keytypes:
 				*arg2 = '\0';
 				arg2++;
 			}
+			i++;
 			if (!*activep || value)
 				continue;
 			if (options->num_permitted_cnames >= MAX_CANON_DOMAINS)
@@ -1770,6 +1788,20 @@ option_clear_or_none(const char *o)
 	return o == NULL || strcasecmp(o, "none") == 0;
 }
 
+/*
+ * Returns 1 if CanonicalizePermittedCNAMEs have been specified, 0 otherwise.
+ * Allowed to be called on non-final configuration.
+ */
+int
+config_has_permitted_cnames(Options *options)
+{
+	if (options->num_permitted_cnames == 1 &&
+	    strcasecmp(options->permitted_cnames[0].source_list, "none") == 0 &&
+	    strcmp(options->permitted_cnames[0].target_list, "") == 0)
+		return 0;
+	return options->num_permitted_cnames > 0;
+}
+
 /*
  * Initializes options to special values that indicate that they have not yet
  * been set.  Read_config_file will only set options with this value. Options
@@ -1796,6 +1828,7 @@ initialize_options(Options * options)
 	options->use_privileged_port = -1;
 	options->rsa_authentication = -1;
 	options->pubkey_authentication = -1;
+	options->pubkey_disable_pk_check = -1;
 	options->challenge_response_authentication = -1;
 	options->gss_authentication = -1;
 	options->gss_deleg_creds = -1;
@@ -1938,6 +1971,8 @@ fill_default_options(Options * options)
 		options->rsa_authentication = 1;
 	if (options->pubkey_authentication == -1)
 		options->pubkey_authentication = 1;
+	if (options->pubkey_disable_pk_check == -1)
+		options->pubkey_disable_pk_check = 0;
 	if (options->challenge_response_authentication == -1)
 		options->challenge_response_authentication = 1;
 	if (options->gss_authentication == -1)
@@ -2075,6 +2110,16 @@ fill_default_options(Options * options)
 	    &options->pubkey_key_types) != 0)
 		fatal("%s: kex_assemble_names failed", __func__);
 
+	if (options->num_permitted_cnames == 1 &&
+	    !config_has_permitted_cnames(options)) {
+		/* clean up CanonicalizePermittedCNAMEs=none */
+		free(options->permitted_cnames[0].source_list);
+		free(options->permitted_cnames[0].target_list);
+		memset(options->permitted_cnames, '\0',
+		    sizeof(*options->permitted_cnames));
+		options->num_permitted_cnames = 0;
+	}
+
 #define CLEAR_ON_NONE(v) \
 	do { \
 		if (option_clear_or_none(v)) { \
@@ -2543,6 +2588,7 @@ dump_client_config(Options *o, const char *host)
 	dump_cfg_fmtint(oProtocol, o->protocol);
 	dump_cfg_fmtint(oProxyUseFdpass, o->proxy_use_fdpass);
 	dump_cfg_fmtint(oPubkeyAuthentication, o->pubkey_authentication);
+	dump_cfg_fmtint(oPubkeyDisablePKCheck, o->pubkey_disable_pk_check);
 	dump_cfg_fmtint(oRequestTTY, o->request_tty);
 #ifdef WITH_RSA1
 	dump_cfg_fmtint(oRhostsRSAAuthentication, o->rhosts_rsa_authentication);
@@ -2622,14 +2668,14 @@ dump_client_config(Options *o, const char *host)
 	printf("\n");
 
 	/* oCanonicalizePermittedCNAMEs */
-	if ( o->num_permitted_cnames > 0) {
-		printf("canonicalizePermittedcnames");
-		for (i = 0; i < o->num_permitted_cnames; i++) {
-			printf(" %s:%s", o->permitted_cnames[i].source_list,
-			    o->permitted_cnames[i].target_list);
-		}
-		printf("\n");
+	printf("canonicalizePermittedcnames");
+	if (o->num_permitted_cnames == 0)
+		printf(" none");
+	for (i = 0; i < o->num_permitted_cnames; i++) {
+		printf(" %s:%s", o->permitted_cnames[i].source_list,
+		    o->permitted_cnames[i].target_list);
 	}
+	printf("\n");
 
 	/* oCipher */
 	if (o->cipher != SSH_CIPHER_NOT_SET)
diff --git a/readconf.h b/readconf.h
index cef55f7..a5c8362 100644
--- a/readconf.h
+++ b/readconf.h
@@ -41,6 +41,7 @@ typedef struct {
 						 * authentication. */
 	int     rsa_authentication;	/* Try RSA authentication. */
 	int     pubkey_authentication;	/* Try ssh2 pubkey authentication. */
+	int	pubkey_disable_pk_check; /* If true, disables ssh2 pubkey check. */
 	int     hostbased_authentication;	/* ssh2's rhosts_rsa */
 	int     challenge_response_authentication;
 					/* Try S/Key or TIS, authentication. */
@@ -206,6 +207,7 @@ int	 parse_forward(struct Forward *, const char *, int, int);
 int	 parse_jump(const char *, Options *, int);
 int	 default_ssh_port(void);
 int	 option_clear_or_none(const char *);
+int	 config_has_permitted_cnames(Options *);
 void	 dump_client_config(Options *o, const char *host);
 
 void	 add_local_forward(Options *, const struct Forward *);
diff --git a/scp.1 b/scp.1
index 3a28272..601f58d 100644
--- a/scp.1
+++ b/scp.1
@@ -175,6 +175,7 @@ For full details of the options listed below, and their possible values, see
 .It ProxyJump
 .It PubkeyAcceptedKeyTypes
 .It PubkeyAuthentication
+.It PubkeyDisablePKCheck
 .It RekeyLimit
 .It RhostsRSAAuthentication
 .It RSAAuthentication
diff --git a/servconf.c b/servconf.c
index 56b8316..79509a2 100644
--- a/servconf.c
+++ b/servconf.c
@@ -107,6 +107,7 @@ initialize_server_options(ServerOptions *options)
 	options->hostbased_key_types = NULL;
 	options->hostkeyalgorithms = NULL;
 	options->pubkey_authentication = -1;
+	options->pubkey_disable_pk_check = -1;
 	options->pubkey_key_types = NULL;
 	options->kerberos_authentication = -1;
 	options->kerberos_or_local_passwd = -1;
@@ -257,6 +258,8 @@ fill_default_server_options(ServerOptions *options)
 		options->hostbased_uses_name_from_packet_only = 0;
 	if (options->pubkey_authentication == -1)
 		options->pubkey_authentication = 1;
+	if(options->pubkey_disable_pk_check == -1)
+		options->pubkey_disable_pk_check = 0;
 	if (options->kerberos_authentication == -1)
 		options->kerberos_authentication = 0;
 	if (options->kerberos_or_local_passwd == -1)
@@ -400,7 +403,7 @@ typedef enum {
 	sPermitUserEnvironment, sAllowTcpForwarding, sCompression,
 	sRekeyLimit, sAllowUsers, sDenyUsers, sAllowGroups, sDenyGroups,
 	sIgnoreUserKnownHosts, sCiphers, sMacs, sPidFile,
-	sGatewayPorts, sPubkeyAuthentication, sPubkeyAcceptedKeyTypes,
+	sGatewayPorts, sPubkeyAuthentication, sPubkeyAcceptedKeyTypes, sPubkeyDisablePKCheck, sPubkeyAcceptedAlgorithms,
 	sXAuthLocation, sSubsystem, sMaxStartups, sMaxAuthTries, sMaxSessions,
 	sBanner, sUseDNS, sHostbasedAuthentication,
 	sHostbasedUsesNameFromPacketOnly, sHostbasedAcceptedKeyTypes,
@@ -458,6 +461,7 @@ static struct {
 	{ "hostkeyalgorithms", sHostKeyAlgorithms, SSHCFG_GLOBAL },
 	{ "rsaauthentication", sDeprecated, SSHCFG_ALL },
 	{ "pubkeyauthentication", sPubkeyAuthentication, SSHCFG_ALL },
+	{ "pubkeydisablepkcheck", sPubkeyDisablePKCheck, SSHCFG_ALL },
 	{ "pubkeyacceptedkeytypes", sPubkeyAcceptedKeyTypes, SSHCFG_ALL },
 	{ "dsaauthentication", sPubkeyAuthentication, SSHCFG_GLOBAL }, /* alias */
 #ifdef KRB5
@@ -1193,6 +1197,10 @@ process_server_config_line(ServerOptions *options, char *line,
 		intptr = &options->pubkey_authentication;
 		goto parse_flag;
 
+	case sPubkeyDisablePKCheck:
+		intptr = &options->pubkey_disable_pk_check;
+		goto parse_flag;
+
 	case sPubkeyAcceptedKeyTypes:
 		charptr = &options->pubkey_key_types;
 		goto parse_keytypes;
@@ -1969,6 +1977,7 @@ copy_set_server_options(ServerOptions *dst, ServerOptions *src, int preauth)
 	M_CP_INTOPT(password_authentication);
 	M_CP_INTOPT(gss_authentication);
 	M_CP_INTOPT(pubkey_authentication);
+	M_CP_INTOPT(pubkey_disable_pk_check);
 	M_CP_INTOPT(kerberos_authentication);
 	M_CP_INTOPT(hostbased_authentication);
 	M_CP_INTOPT(hostbased_uses_name_from_packet_only);
@@ -2240,6 +2249,7 @@ dump_config(ServerOptions *o)
 	dump_cfg_fmtint(sHostbasedUsesNameFromPacketOnly,
 	    o->hostbased_uses_name_from_packet_only);
 	dump_cfg_fmtint(sPubkeyAuthentication, o->pubkey_authentication);
+	dump_cfg_fmtint(sPubkeyDisablePKCheck, o->pubkey_disable_pk_check);
 #ifdef KRB5
 	dump_cfg_fmtint(sKerberosAuthentication, o->kerberos_authentication);
 	dump_cfg_fmtint(sKerberosOrLocalPasswd, o->kerberos_or_local_passwd);
diff --git a/servconf.h b/servconf.h
index 5853a97..f5100da 100644
--- a/servconf.h
+++ b/servconf.h
@@ -99,6 +99,7 @@ typedef struct {
 	char   *hostbased_key_types;	/* Key types allowed for hostbased */
 	char   *hostkeyalgorithms;	/* SSH2 server key types */
 	int     pubkey_authentication;	/* If true, permit ssh2 pubkey authentication. */
+	int	pubkey_disable_pk_check;	/* If true, disable ssh2 pubkey check. */
 	char   *pubkey_key_types;	/* Key types allowed for public key */
 	int     kerberos_authentication;	/* If true, permit Kerberos
 						 * authentication. */
diff --git a/sftp.1 b/sftp.1
index fbdd00a..ffc8929 100644
--- a/sftp.1
+++ b/sftp.1
@@ -239,6 +239,7 @@ For full details of the options listed below, and their possible values, see
 .It ProxyCommand
 .It ProxyJump
 .It PubkeyAuthentication
+.It PubkeyDisablePKCheck
 .It RekeyLimit
 .It RhostsRSAAuthentication
 .It RSAAuthentication
diff --git a/ssh.1 b/ssh.1
index 4011c65..7ca433f 100644
--- a/ssh.1
+++ b/ssh.1
@@ -546,6 +546,7 @@ For full details of the options listed below, and their possible values, see
 .It ProxyUseFdpass
 .It PubkeyAcceptedKeyTypes
 .It PubkeyAuthentication
+.It PubkeyDisablePKCheck
 .It RekeyLimit
 .It RemoteForward
 .It RequestTTY
diff --git a/ssh.c b/ssh.c
index 32b27bb..52cb665 100644
--- a/ssh.c
+++ b/ssh.c
@@ -334,7 +334,7 @@ check_follow_cname(int direct, char **namep, const char *cname)
 	int i;
 	struct allowed_cname *rule;
 
-	if (*cname == '\0' || options.num_permitted_cnames == 0 ||
+	if (*cname == '\0' || !config_has_permitted_cnames(&options) ||
 	    strcmp(*namep, cname) == 0)
 		return 0;
 	if (options.canonicalize_hostname == SSH_CANONICALISE_NO)
@@ -1056,7 +1056,7 @@ main(int ac, char **av)
 	 */
 	direct = option_clear_or_none(options.proxy_command) &&
 	    options.jump_host == NULL;
-	if (addrs == NULL && options.num_permitted_cnames != 0 && (direct ||
+	if (addrs == NULL && config_has_permitted_cnames(&options) && (direct ||
 	    options.canonicalize_hostname == SSH_CANONICALISE_ALWAYS)) {
 		if ((addrs = resolve_host(host, options.port,
 		    option_clear_or_none(options.proxy_command),
diff --git a/ssh_config b/ssh_config
index 90fb63f..93a4aca 100644
--- a/ssh_config
+++ b/ssh_config
@@ -26,6 +26,7 @@
 #   HostbasedAuthentication no
 #   GSSAPIAuthentication no
 #   GSSAPIDelegateCredentials no
+#   PubkeyDisablePKCheck no
 #   BatchMode no
 #   CheckHostIP yes
 #   AddressFamily any
diff --git a/ssh_config.5 b/ssh_config.5
index 532745b..13f7034 100644
--- a/ssh_config.5
+++ b/ssh_config.5
@@ -340,6 +340,11 @@ to be canonicalized to names in the
 or
 .Qq *.c.example.com
 domains.
+.Pp
+A single argument of
+.Qq none
+causes no CNAMEs to be considered for canonicalization.
+This is the default behaviour.
 .It Cm CertificateFile
 Specifies a file from which the user's certificate is read.
 A corresponding private key must be provided separately in order
@@ -1308,6 +1313,13 @@ The argument to this keyword must be
 (the default)
 or
 .Cm no .
+.It Cm PubkeyDisablePKCheck
+Specifies whether to disable public key lookup on the remote server.
+The argument to this keyword must be
+.Cm no
+(the default)
+or
+.Cm yes .
 .It Cm RekeyLimit
 Specifies the maximum amount of data that may be transmitted before the
 session key is renegotiated, optionally followed a maximum amount of
diff --git a/sshconnect2.c b/sshconnect2.c
index cd3c9d8..ab25ccd 100644
--- a/sshconnect2.c
+++ b/sshconnect2.c
@@ -1526,7 +1526,7 @@ userauth_pubkey(Authctxt *authctxt)
 		 * encrypted keys we cannot do this and have to load the
 		 * private key instead
 		 */
-		if (id->key != NULL) {
+		if (id->key != NULL && !(options.pubkey_disable_pk_check && options.identities_only)) {
 			if (try_identity(id)) {
 				debug("Offering %s public key: %s",
 				    key_type(id->key), id->filename);
diff --git a/sshd_config b/sshd_config
index 4eb2e02..f80c462 100644
--- a/sshd_config
+++ b/sshd_config
@@ -42,9 +42,9 @@
 AuthorizedKeysFile	.ssh/authorized_keys
 
 #AuthorizedPrincipalsFile none
-
 #AuthorizedKeysCommand none
 #AuthorizedKeysCommandUser nobody
+#PubkeyDisablePKCheck no
 
 # For this to work you will also need host keys in /etc/ssh/ssh_known_hosts
 #HostbasedAuthentication no
diff --git a/sshd_config.5 b/sshd_config.5
index ac6ccc7..a4f2983 100644
--- a/sshd_config.5
+++ b/sshd_config.5
@@ -1091,6 +1091,7 @@ Available keywords are
 .Cm PermitUserRC ,
 .Cm PubkeyAcceptedKeyTypes ,
 .Cm PubkeyAuthentication ,
+.Cm PubkeyDisablePKCheck ,
 .Cm RekeyLimit ,
 .Cm RevokedKeys ,
 .Cm StreamLocalBindMask ,
@@ -1317,6 +1318,10 @@ The list of available key types may also be obtained using
 Specifies whether public key authentication is allowed.
 The default is
 .Cm yes .
+.It Cm PubkeyDisablePKCheck
+Disables publickey lookups during publickey authentication. Only recommended for high security environments.
+The default is
+.CM no .
 .It Cm RekeyLimit
 Specifies the maximum amount of data that may be transmitted before the
 session key is renegotiated, optionally followed a maximum amount of
-- 
2.25.1

