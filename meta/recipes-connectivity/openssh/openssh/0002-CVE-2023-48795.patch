From e8c9ed5622695fbb88fe74c56857c152414cf2da Mon Sep 17 00:00:00 2001
From: "markus@openbsd.org" <markus@openbsd.org>
Date: Tue, 30 May 2017 14:19:15 +0000
Subject: [PATCH] upstream commit

ssh: pass struct ssh to auth functions, too; ok djm@

Upstream-ID: d13c509cc782f8f19728fbea47ac7cf36f6e85dd

Upstream-Status: Backport [https://github.com/openssh/openssh-portable/commit/94583beb24a6c5fd19cedb9104ab2d2d5cd052b6]
CVE: CVE-2023-48795
Signed-off-by: Priyal Doshi <pdoshi@mvista.com>
---
 packet.h      |  3 +++
 sshconnect2.c | 37 ++++++++++++++++++++++++-------------
 2 files changed, 27 insertions(+), 13 deletions(-)

diff --git a/packet.h b/packet.h
index 0d25b35..cae868a 100644
--- a/packet.h
+++ b/packet.h
@@ -77,6 +77,9 @@ struct ssh {
 	TAILQ_HEAD(, key_entry) private_keys;
 	TAILQ_HEAD(, key_entry) public_keys;
 
+	/* Client/Server authentication context */
+	void *authctxt;
+
 	/* APP data */
 	void *app_data;
 };
diff --git a/sshconnect2.c b/sshconnect2.c
index ab25ccd..4914abb 100644
--- a/sshconnect2.c
+++ b/sshconnect2.c
@@ -432,10 +432,12 @@ ssh_userauth2(const char *local_user, const char *server_user, char *host,
 	    (r = sshpkt_send(ssh)) != 0)
 		fatal("%s: %s", __func__, ssh_err(r));
 
+	ssh->authctxt = &authctxt;
 	ssh_dispatch_init(ssh, &input_userauth_error);
 	ssh_dispatch_set(ssh, SSH2_MSG_EXT_INFO, &input_userauth_ext_info);
 	ssh_dispatch_set(ssh, SSH2_MSG_SERVICE_ACCEPT, &input_userauth_service_accept);
-	ssh_dispatch_run(ssh, DISPATCH_BLOCK, &authctxt.success, &authctxt);	/* loop until success */
+	ssh_dispatch_run(ssh, DISPATCH_BLOCK, &authctxt.success, ssh);	/* loop until success */
+	ssh->authctxt = NULL;
 
 	pubkey_cleanup(&authctxt);
 	ssh_dispatch_range(ssh, SSH2_MSG_USERAUTH_MIN, SSH2_MSG_USERAUTH_MAX, NULL);
@@ -449,8 +451,8 @@ ssh_userauth2(const char *local_user, const char *server_user, char *host,
 int
 input_userauth_service_accept(int type, u_int32_t seqnr, void *ctxt)
 {
-	Authctxt *authctxt = ctxt;
-	struct ssh *ssh = active_state;
+	struct ssh *ssh = ctxt;
+	Authctxt *authctxt = ssh->authctxt;
 	int r;
 
 	if (ssh_packet_remaining(ssh) > 0) {
@@ -483,7 +485,7 @@ input_userauth_service_accept(int type, u_int32_t seqnr, void *ctxt)
 int
 input_userauth_ext_info(int type, u_int32_t seqnr, void *ctxt)
 {
-	return kex_input_ext_info(type, seqnr, active_state);
+	return kex_input_ext_info(type, seqnr, ctxt);
 }
 
 void
@@ -551,7 +553,8 @@ input_userauth_banner(int type, u_int32_t seq, void *ctxt)
 int
 input_userauth_success(int type, u_int32_t seq, void *ctxt)
 {
-	Authctxt *authctxt = ctxt;
+	struct ssh *ssh = ctxt;
+	Authctxt *authctxt = ssh->authctxt;
 
 	if (authctxt == NULL)
 		fatal("input_userauth_success: no authentication context");
@@ -568,7 +571,8 @@ input_userauth_success(int type, u_int32_t seq, void *ctxt)
 int
 input_userauth_success_unexpected(int type, u_int32_t seq, void *ctxt)
 {
-	Authctxt *authctxt = ctxt;
+	struct ssh *ssh = ctxt;
+	Authctxt *authctxt = ssh->authctxt;
 
 	if (authctxt == NULL)
 		fatal("%s: no authentication context", __func__);
@@ -608,7 +612,8 @@ input_userauth_failure(int type, u_int32_t seq, void *ctxt)
 int
 input_userauth_pk_ok(int type, u_int32_t seq, void *ctxt)
 {
-	Authctxt *authctxt = ctxt;
+	struct ssh *ssh = ctxt;
+	Authctxt *authctxt = ssh->authctxt;
 	Key *key = NULL;
 	Identity *id = NULL;
 	Buffer b;
@@ -739,7 +744,8 @@ userauth_gssapi(Authctxt *authctxt)
 static OM_uint32
 process_gssapi_token(void *ctxt, gss_buffer_t recv_tok)
 {
-	Authctxt *authctxt = ctxt;
+	struct ssh *ssh = ctxt;
+	Authctxt *authctxt = ssh->authctxt;
 	Gssctxt *gssctxt = authctxt->methoddata;
 	gss_buffer_desc send_tok = GSS_C_EMPTY_BUFFER;
 	gss_buffer_desc mic = GSS_C_EMPTY_BUFFER;
@@ -794,7 +800,8 @@ process_gssapi_token(void *ctxt, gss_buffer_t recv_tok)
 int
 input_gssapi_response(int type, u_int32_t plen, void *ctxt)
 {
-	Authctxt *authctxt = ctxt;
+	struct ssh *ssh = ctxt;
+	Authctxt *authctxt = ssh->authctxt;
 	Gssctxt *gssctxt;
 	int oidlen;
 	char *oidv;
@@ -835,7 +842,8 @@ input_gssapi_response(int type, u_int32_t plen, void *ctxt)
 int
 input_gssapi_token(int type, u_int32_t plen, void *ctxt)
 {
-	Authctxt *authctxt = ctxt;
+	struct ssh *ssh = ctxt;
+	Authctxt *authctxt = ssh->authctxt;
 	gss_buffer_desc recv_tok;
 	OM_uint32 status;
 	u_int slen;
@@ -864,7 +872,8 @@ input_gssapi_token(int type, u_int32_t plen, void *ctxt)
 int
 input_gssapi_errtok(int type, u_int32_t plen, void *ctxt)
 {
-	Authctxt *authctxt = ctxt;
+	struct ssh *ssh = ctxt;
+	Authctxt *authctxt = ssh->authctxt;
 	Gssctxt *gssctxt;
 	gss_buffer_desc send_tok = GSS_C_EMPTY_BUFFER;
 	gss_buffer_desc recv_tok;
@@ -966,7 +975,8 @@ userauth_passwd(Authctxt *authctxt)
 int
 input_userauth_passwd_changereq(int type, u_int32_t seqnr, void *ctxt)
 {
-	Authctxt *authctxt = ctxt;
+	struct ssh *ssh = ctxt;
+	Authctxt *authctxt = ssh->authctxt;
 	char *info, *lang, *password = NULL, *retype = NULL;
 	char prompt[150];
 	const char *host;
@@ -1589,7 +1599,8 @@ userauth_kbdint(Authctxt *authctxt)
 int
 input_userauth_info_req(int type, u_int32_t seq, void *ctxt)
 {
-	Authctxt *authctxt = ctxt;
+	struct ssh *ssh = ctxt;
+	Authctxt *authctxt = ssh->authctxt;
 	char *name, *inst, *lang, *prompt, *response;
 	u_int num_prompts, i;
 	int echo = 0;
-- 
2.34.1

