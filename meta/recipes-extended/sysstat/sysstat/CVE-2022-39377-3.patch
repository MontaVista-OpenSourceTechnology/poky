From 5253548583dc6ddeb4293cf6f54ab1330c9bba05 Mon Sep 17 00:00:00 2001
From: Vijay Anusuri <vanusuri@mvista.com>
Date: Tue, 6 Dec 2022 06:16:20 +0000
Subject: [PATCH] Make sure values to be compared are unsigned integers

It seems safer to make sure that input values are unsigned int before
casting them to unsigned long long and making the comparison.

Signed-off-by: Sebastien GODARD <sysstat@users.noreply.github.com>

Upstream-Status: Backport [http://launchpadlibrarian.net/635991215/sysstat_11.6.1-1ubuntu0.1_11.6.1-1ubuntu0.2.diff.gz]
CVE: CVE-2022-39377
Signed-off-by: Vijay Anusuri <vanusuri@mvista.com>
---
 common.c    | 10 ++++++----
 common.h    |  2 +-
 sa_common.c | 12 ++++++------
 sadc.c      |  6 +++---
 4 files changed, 16 insertions(+), 14 deletions(-)

diff --git a/common.c b/common.c
index 662e15c..df97bd0 100644
--- a/common.c
+++ b/common.c
@@ -1505,13 +1505,15 @@ int parse_values(char *strargv, unsigned char bitmap[], int max_val, const char
  * @val3	Third value.
  ***************************************************************************
  */
-void check_overflow(unsigned long long val1, unsigned long long val2,
-                  unsigned long long val3)
+void check_overflow(unsigned int val1, unsigned int val2,
+                  unsigned int val3)
 {
-      if (val1 * val2 * val3 > UINT_MAX) {
+      if ((unsigned long long) val1 * (unsigned long long) val2 *
+          (unsigned long long) val3 > UINT_MAX) {
 #ifdef DEBUG
               fprintf(stderr, "%s: Overflow detected (%llu). Aborting...\n",
-                      __FUNCTION__, val1 * val2 * val3);
+                      __FUNCTION__, (unsigned long long) val1 * (unsigned long long) val2 *
+                      (unsigned long long) val3);
 #endif
       exit(4);
               }
diff --git a/common.h b/common.h
index 0d579a1..07ca15c 100644
--- a/common.h
+++ b/common.h
@@ -242,7 +242,7 @@ void compute_ext_disk_stats
 	(struct stats_disk *, struct stats_disk *, unsigned long long,
 	 struct ext_disk_stats *);
 void check_overflow
-        (unsigned long long, unsigned long long, unsigned long long);
+        (unsigned int, unsigned int, unsigned int);
 int count_bits
 	(void *, int);
 int count_csvalues
diff --git a/sa_common.c b/sa_common.c
index ca002de..8b01fea 100644
--- a/sa_common.c
+++ b/sa_common.c
@@ -67,9 +67,9 @@ void allocate_structures(struct activity *act[])
 		if (act[i]->nr > 0) {
 
                         /* Look for a possible overflow */
-                        check_overflow((unsigned long long) act[i]->msize,
-                                       (unsigned long long) act[i]->nr,
-                                       (unsigned long long) act[i]->nr2);
+                        check_overflow((unsigned int) act[i]->msize,
+                                       (unsigned int) act[i]->nr,
+                                       (unsigned int) act[i]->nr2);
 
 			for (j = 0; j < 3; j++) {
 				SREALLOC(act[i]->buf[j], void,
@@ -1440,9 +1440,9 @@ int reallocate_vol_act_structures(struct activity *act[], unsigned int act_nr,
 	act[p]->nr = act_nr;
 
         /* Look for a possible overflow */
-        check_overflow((unsigned long long) act[p]->msize,
-                       (unsigned long long) act[p]->nr,
-                       (unsigned long long) act[p]->nr2);
+        check_overflow((unsigned int) act[p]->msize,
+                       (unsigned int) act[p]->nr,
+                       (unsigned int) act[p]->nr2);
 
 	for (j = 0; j < 3; j++) {
 		SREALLOC(act[p]->buf[j], void,
diff --git a/sadc.c b/sadc.c
index bcef470..14af68c 100644
--- a/sadc.c
+++ b/sadc.c
@@ -334,9 +334,9 @@ void sa_sys_init(void)
 		if (act[i]->nr > 0) {
 
                         /* Look for a possible overflow */
-                        check_overflow((unsigned long long) act[i]->msize,
-                                       (unsigned long long) act[i]->nr,
-                                       (unsigned long long) act[i]->nr2);
+                        check_overflow((unsigned int) act[i]->msize,
+                                       (unsigned int) act[i]->nr,
+                                       (unsigned int) act[i]->nr2);
 
 			/* Allocate structures for current activity */
 			SREALLOC(act[i]->_buf0, void,
-- 
2.18.2

