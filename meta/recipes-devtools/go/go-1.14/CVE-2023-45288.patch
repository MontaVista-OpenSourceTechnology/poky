From ae5913347d15cf7d1f218916c22717e5739a9ea3 Mon Sep 17 00:00:00 2001
From: Damien Neil <dneil@google.com>
Date: Thu, 28 Mar 2024 16:49:40 -0700
Subject: [PATCH] [release-branch.go1.21] net/http: update bundled
 golang.org/x/net/http2

Disable cmd/internal/moddeps test, since this update includes PRIVATE
track fixes.

Fixes CVE-2023-45288
For #65051
Fixes #65387

Change-Id: I17da6da2fe0dd70062b49f94377875acb34829a1
Reviewed-on: https://team-review.git.corp.google.com/c/golang/go-private/+/2197267
Reviewed-by: Dmitri Shuralyov <dmitshur@google.com>
Run-TryBot: Damien Neil <dneil@google.com>
Reviewed-by: Tatiana Bradley <tatianabradley@google.com>
Reviewed-on: https://go-review.googlesource.com/c/go/+/576075
TryBot-Bypass: Dmitri Shuralyov <dmitshur@google.com>
Commit-Queue: Dmitri Shuralyov <dmitshur@golang.org>
Auto-Submit: Dmitri Shuralyov <dmitshur@google.com>
Reviewed-by: Than McIntosh <thanm@google.com>

Upstream-Status: Backport [https://github.com/golang/go/commit/ae5913347d15cf7d1f218916c22717e5739a9ea3]
CVE: CVE-2023-45288
Signed-off-by: Vijay Anusuri <vanusuri@mvista.com>
---
 src/net/http/h2_bundle.go | 31 +++++++++++++++++++++++++++++++
 1 file changed, 31 insertions(+)

diff --git a/src/net/http/h2_bundle.go b/src/net/http/h2_bundle.go
index cc03a62..8591b27 100644
--- a/src/net/http/h2_bundle.go
+++ b/src/net/http/h2_bundle.go
@@ -2766,6 +2766,7 @@ func (fr *http2Framer) readMetaFrame(hf *http2HeadersFrame) (*http2MetaHeadersFr
 		if size > remainSize {
 			hdec.SetEmitEnabled(false)
 			mh.Truncated = true
+			remainSize = 0
 			return
 		}
 		remainSize -= size
@@ -2778,6 +2779,36 @@ func (fr *http2Framer) readMetaFrame(hf *http2HeadersFrame) (*http2MetaHeadersFr
 	var hc http2headersOrContinuation = hf
 	for {
 		frag := hc.HeaderBlockFragment()
+
+                // Avoid parsing large amounts of headers that we will then discard.
+                // If the sender exceeds the max header list size by too much,
+                // skip parsing the fragment and close the connection.
+                //
+                // "Too much" is either any CONTINUATION frame after we've already
+                // exceeded the max header list size (in which case remainSize is 0),
+                // or a frame whose encoded size is more than twice the remaining
+                // header list bytes we're willing to accept.
+                if int64(len(frag)) > int64(2*remainSize) {
+                        if http2VerboseLogs {
+                                log.Printf("http2: header list too large")
+                        }
+                        // It would be nice to send a RST_STREAM before sending the GOAWAY,
+                        // but the struture of the server's frame writer makes this difficult.
+                        return nil, http2ConnectionError(http2ErrCodeProtocol)
+                }
+
+                // Also close the connection after any CONTINUATION frame following an
+                // invalid header, since we stop tracking the size of the headers after
+                // an invalid one.
+                if invalid != nil {
+                        if http2VerboseLogs {
+                                log.Printf("http2: invalid header: %v", invalid)
+                        }
+                        // It would be nice to send a RST_STREAM before sending the GOAWAY,
+                        // but the struture of the server's frame writer makes this difficult.
+                        return nil, http2ConnectionError(http2ErrCodeProtocol)
+                }
+
 		if _, err := hdec.Write(frag); err != nil {
 			return nil, http2ConnectionError(http2ErrCodeCompression)
 		}
-- 
2.24.4

