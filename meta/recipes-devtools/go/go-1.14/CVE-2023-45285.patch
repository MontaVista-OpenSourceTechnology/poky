From 23c943e5296c6fa3a6f9433bd929306c4dbf2aa3 Mon Sep 17 00:00:00 2001
From: "Bryan C. Mills" <bcmills@google.com>
Date: Thu, 2 Nov 2023 15:06:35 -0400
Subject: [PATCH] CVE-2023-45285: error out if the requested repo does not support a secure protocol

Upstream-Status: Backport from https://github.com/golang/go/commit/23c943e5296c6fa3a6f9433bd929306c4dbf2aa3
CVE: CVE-2023-45285

Signed-off-by: Rohini Sangam <rsangam@mvista.com>
---
 .../src/cmd/go/internal/get/vcs.go            | 24 ++++++++++++----
 .../script/mod_insecure_issue63845.txt        | 28 +++++++++++++++++++
 2 files changed, 46 insertions(+), 6 deletions(-)
 create mode 100644 project/tmp/work/corei7-64-montavista-linux/go/1.14.15-r010/go/src/cmd/go/testdata/script/mod_insecure_issue63845.txt

diff --git a/src/cmd/go/internal/get/vcs.go b/src/cmd/go/internal/get/vcs.go
index 2e4d6388c..76d8e1c61 100644
--- a/src/cmd/go/internal/get/vcs.go
+++ b/src/cmd/go/internal/get/vcs.go
@@ -735,19 +735,31 @@ func repoRootFromVCSPaths(importPath string, security web.SecurityMode, vcsPaths
 		if !srv.schemelessRepo {
 			repoURL = match["repo"]
 		} else {
-			scheme := vcs.scheme[0] // default to first scheme
 			repo := match["repo"]
-			if vcs.pingCmd != "" {
-				// If we know how to test schemes, scan to find one.
+			scheme, err := func() (string, error) {
 				for _, s := range vcs.scheme {
 					if security == web.SecureOnly && !vcs.isSecureScheme(s) {
 						continue
 					}
-					if vcs.ping(s, repo) == nil {
-						scheme = s
-						break
+					// If we know how to ping URL schemes for this VCS,
+					// check that this repo works.
+					// Otherwise, default to the first scheme
+					// that meets the requested security level.
+					if vcs.pingCmd == "" {
+						return s, nil
 					}
+					if err := vcs.ping(s, repo); err == nil {
+						return s, nil
+					}
+				}
+				securityFrag := ""
+				if security == web.SecureOnly {
+					securityFrag = "secure "
 				}
+				return "", fmt.Errorf("no %sprotocol found for repository", securityFrag)
+			}()
+			if err != nil {
+				return nil, err
 			}
 			repoURL = scheme + "://" + repo
 		}
diff --git a/src/cmd/go/testdata/script/mod_insecure_issue63845.txt b/src/cmd/go/testdata/script/mod_insecure_issue63845.txt
new file mode 100644
index 000000000..c051c05f5
--- /dev/null
+++ b/src/cmd/go/testdata/script/mod_insecure_issue63845.txt
@@ -0,0 +1,28 @@
+# Regression test for https://go.dev/issue/63845:
+# If 'git ls-remote' fails for all secure protocols,
+# we should fail instead of falling back to an arbitrary protocol.
+#
+# Note that this test does not use the local vcweb test server
+# (vcs-test.golang.org), because the hook for redirecting to that
+# server bypasses the "ping to determine protocol" logic
+# in cmd/go/internal/vcs.
+
+[!net:golang.org] skip
+[!git] skip
+[short] skip 'tries to access a nonexistent external Git repo'
+
+env GOPRIVATE=golang.org
+env CURLOPT_TIMEOUT_MS=100
+env GIT_SSH_COMMAND=false
+
+! go get -x golang.org/nonexist.git@latest
+stderr '^git ls-remote https://golang.org/nonexist$'
+stderr '^git ls-remote git\+ssh://golang.org/nonexist'
+stderr '^git ls-remote ssh://golang.org/nonexist$'
+! stderr 'git://'
+stderr '^go: golang.org/nonexist.git@latest: no secure protocol found for repository$'
+
+-- go.mod --
+module example
+
+go 1.19
-- 
2.24.4

