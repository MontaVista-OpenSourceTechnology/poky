From 0713f1e08af550b6a11d947e9b62cbb288c5e5d9 Mon Sep 17 00:00:00 2001
From: Vijay Anusuri <vanusuri@mvista.com>
Date: Wed, 12 Oct 2022 02:43:18 +0000
Subject: [PATCH] net/http: update bundled golang.org/x/net/http2

Upstream-Status: Backport [https://github.com/golang/go/commit/5bc9106458fc07851ac324a4157132a91b1f3479]
CVE: CVE-2022-27664
Signed-off-by: Vijay Anusuri <vanusuri@mvista.com>
---
 src/net/http/h2_bundle.go | 21 +++++++++++++--------
 1 file changed, 13 insertions(+), 8 deletions(-)

diff --git a/src/net/http/h2_bundle.go b/src/net/http/h2_bundle.go
index 82ebd2a..5c46153 100644
--- a/src/net/http/h2_bundle.go
+++ b/src/net/http/h2_bundle.go
@@ -3373,10 +3373,11 @@ var (
 // name (key). See httplex.ValidHeaderName for the base rules.
 //
 // Further, http2 says:
-//   "Just as in HTTP/1.x, header field names are strings of ASCII
-//   characters that are compared in a case-insensitive
-//   fashion. However, header field names MUST be converted to
-//   lowercase prior to their encoding in HTTP/2. "
+//
+//      "Just as in HTTP/1.x, header field names are strings of ASCII
+//      characters that are compared in a case-insensitive
+//      fashion. However, header field names MUST be converted to
+//      lowercase prior to their encoding in HTTP/2. "
 func http2validWireHeaderFieldName(v string) bool {
 	if len(v) == 0 {
 		return false
@@ -3572,8 +3573,8 @@ func (s *http2sorter) SortStrings(ss []string) {
 // validPseudoPath reports whether v is a valid :path pseudo-header
 // value. It must be either:
 //
-//     *) a non-empty string starting with '/'
-//     *) the string '*', for OPTIONS requests.
+//      *) a non-empty string starting with '/'
+//      *) the string '*', for OPTIONS requests.
 //
 // For now this is only used a quick check for deciding when to clean
 // up Opaque URLs before sending requests from the Transport.
@@ -4967,6 +4968,9 @@ func (sc *http2serverConn) goAway(code http2ErrCode) {
 func (sc *http2serverConn) goAwayIn(code http2ErrCode, forceCloseIn time.Duration) {
 	sc.serveG.check()
 	if sc.inGoAway {
+                if sc.goAwayCode == http2ErrCodeNo {
+                        sc.goAwayCode = code
+                }
 		return
 	}
 	if forceCloseIn != 0 {
@@ -6118,8 +6122,9 @@ func (rws *http2responseWriterState) writeChunk(p []byte) (n int, err error) {
 // prior to the headers being written. If the set of trailers is fixed
 // or known before the header is written, the normal Go trailers mechanism
 // is preferred:
-//    https://golang.org/pkg/net/http/#ResponseWriter
-//    https://golang.org/pkg/net/http/#example_ResponseWriter_trailers
+//
+//      https://golang.org/pkg/net/http/#ResponseWriter
+//      https://golang.org/pkg/net/http/#example_ResponseWriter_trailers
 const http2TrailerPrefix = "Trailer:"
 
 // promoteUndeclaredTrailers permits http.Handlers to set trailers
-- 
2.18.2

