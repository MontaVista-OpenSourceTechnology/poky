From bffc762f87ae8d18c6001bf0044a76004245754c Mon Sep 17 00:00:00 2001
From: Taylor Blau <me@ttaylorr.com>
Date: Tue, 24 Jan 2023 19:43:51 -0500
Subject: [PATCH] dir-iterator: prevent top-level symlinks without FOLLOW_SYMLINKS

When using the dir_iterator API, we first stat(2) the base path, and
then use that as a starting point to enumerate the directory's contents.

If the directory contains symbolic links, we will immediately die() upon
encountering them without the `FOLLOW_SYMLINKS` flag. The same is not
true when resolving the top-level directory, though.

As explained in a previous commit, this oversight in 6f054f9
(builtin/clone.c: disallow `--local` clones with symlinks, 2022-07-28)
can be used as an attack vector to include arbitrary files on a victim's
filesystem from outside of the repository.

Prevent resolving top-level symlinks unless the FOLLOW_SYMLINKS flag is
given, which will cause clones of a repository with a symlink'd
"$GIT_DIR/objects" directory to fail.

Signed-off-by: Taylor Blau <me@ttaylorr.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>

Upstream-Status: Backport [https://github.com/git/git/commit/bffc762f87ae8d18c6001bf0044a76004245754c]
CVE: CVE-2023-22490
Signed-off-by: Vijay Anusuri <vanusuri@mvista.com>
---
 builtin/clone.c            |  4 +---
 dir-iterator.c             | 13 +++++++++----
 dir-iterator.h             |  5 +++++
 t/t5604-clone-reference.sh | 13 +++++++++++++
 4 files changed, 28 insertions(+), 7 deletions(-)

diff --git a/builtin/clone.c b/builtin/clone.c
index 6097f3d..6278e95 100644
--- a/builtin/clone.c
+++ b/builtin/clone.c
@@ -413,12 +413,10 @@ static void copy_or_link_directory(struct strbuf *src, struct strbuf *dest,
 	int src_len, dest_len;
         struct dir_iterator *iter;
 	int iter_status;
-	unsigned int flags;
 
         mkdir_if_missing(dest->buf, 0777);
 
-	flags = DIR_ITERATOR_PEDANTIC | DIR_ITERATOR_FOLLOW_SYMLINKS;
-	iter = dir_iterator_begin(src->buf, flags);
+	iter = dir_iterator_begin(src->buf, DIR_ITERATOR_PEDANTIC);
 
         if (!iter)
                 die_errno(_("failed to start iterator over '%s'"), src->buf);
diff --git a/dir-iterator.c b/dir-iterator.c
index ba8dd32..659c009 100644
--- a/dir-iterator.c
+++ b/dir-iterator.c
@@ -201,7 +201,7 @@ struct dir_iterator *dir_iterator_begin(const char *path, unsigned int flags)
 {
 	struct dir_iterator_int *iter = xcalloc(1, sizeof(*iter));
 	struct dir_iterator *dir_iterator = &iter->base;
-	int saved_errno;
+	int saved_errno, err;
 
 	strbuf_init(&iter->base.path, PATH_MAX);
 	strbuf_addstr(&iter->base.path, path);
@@ -211,10 +211,15 @@ struct dir_iterator *dir_iterator_begin(const char *path, unsigned int flags)
 	iter->flags = flags;
 
 	/*
-         * Note: stat already checks for NULL or empty strings and
-         * inexistent paths.
+         * Note: stat/lstat already checks for NULL or empty strings and
+         * nonexistent paths.
          */
-	if (stat(iter->base.path.buf, &iter->base.st) < 0) {
+	if (iter->flags & DIR_ITERATOR_FOLLOW_SYMLINKS)
+		err = stat(iter->base.path.buf, &iter->base.st);
+	else
+		err = lstat(iter->base.path.buf, &iter->base.st);
+
+	if (err < 0) {
 		saved_errno = errno;
 		goto error_out;
 	}
diff --git a/dir-iterator.h b/dir-iterator.h
index 41fa49c..5a09d05 100644
--- a/dir-iterator.h
+++ b/dir-iterator.h
@@ -59,6 +59,11 @@
  *   not the symlinks themselves, which is the default behavior. Broken
  *   symlinks are ignored.
  *
+ *   Note: setting DIR_ITERATOR_FOLLOW_SYMLINKS affects resolving the
+ *   starting path as well (e.g., attempting to iterate starting at a
+ *   symbolic link pointing to a directory without FOLLOW_SYMLINKS will
+ *   result in an error).
+ *
  * Warning: circular symlinks are also followed when
  * DIR_ITERATOR_FOLLOW_SYMLINKS is set. The iteration may end up with
  * an ELOOP if they happen and DIR_ITERATOR_PEDANTIC is set.
diff --git a/t/t5604-clone-reference.sh b/t/t5604-clone-reference.sh
index ce67be7..222a3b3 100755
--- a/t/t5604-clone-reference.sh
+++ b/t/t5604-clone-reference.sh
@@ -283,4 +283,17 @@ test_expect_success SYMLINKS 'clone repo with symlinked or unknown files at obje
        test_cmp expected-files T--shared.objects-files.raw &&
        test_must_be_empty T--shared.objects-symlinks.raw
 '
+
+test_expect_success SYMLINKS 'clone repo with symlinked objects directory' '
+	test_when_finished "rm -fr sensitive malicious" &&
+	mkdir -p sensitive &&
+	echo "secret" >sensitive/file &&
+	git init malicious &&
+	rm -fr malicious/.git/objects &&
+	ln -s "$(pwd)/sensitive" ./malicious/.git/objects &&
+	test_must_fail git clone --local malicious clone 2>err &&
+	test_path_is_missing clone &&
+	grep "failed to start iterator over" err
+'
+
 test_done
-- 
2.18.2

