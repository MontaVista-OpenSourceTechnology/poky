From ff7ccc8c9a6e61a7225c161c743a49ac079f1425 Mon Sep 17 00:00:00 2001
From: Matheus Tavares <matheus.bernardino@usp.br>
Date: Wed, 10 Jul 2019 20:59:03 -0300
Subject: [PATCH] clone: use dir-iterator to avoid explicit dir traversal

Replace usage of opendir/readdir/closedir API to traverse directories
recursively, at copy_or_link_directory function, by the dir-iterator
API. This simplifies the code and avoids recursive calls to
copy_or_link_directory.

This process also makes copy_or_link_directory call die() in case of an
error on readdir or stat inside dir_iterator_advance. Previously it
would just print a warning for errors on stat and ignore errors on
readdir, which isn't nice because a local git clone could succeed even
though the .git/objects copy didn't fully succeed.

Signed-off-by: Matheus Tavares <matheus.bernardino@usp.br>
Signed-off-by: Junio C Hamano <gitster@pobox.com>

Upstream-Status: Backport [https://github.com/git/git/commit/ff7ccc8c9a6e61a7225c161c743a49ac079f1425]
Signed-off-by: Vijay Anusuri <vanusuri@mvista.com>
---
 builtin/clone.c | 24 ++++++++++--------------
 1 file changed, 10 insertions(+), 14 deletions(-)

diff --git a/builtin/clone.c b/builtin/clone.c
index 4abd7a8..6097f3d 100644
--- a/builtin/clone.c
+++ b/builtin/clone.c
@@ -408,20 +408,17 @@ static void mkdir_if_missing(const char *pathname, mode_t mode)
 }
 
 static void copy_or_link_directory(struct strbuf *src, struct strbuf *dest,
-				   const char *src_repo, int src_baselen)
+				   const char *src_repo)
 {
 	int src_len, dest_len;
-	DIR *dir;
-        int iter_status;
         struct dir_iterator *iter;
-
-	dir = opendir(src->buf);
-	if (!dir)
-		die_errno(_("failed to open '%s'"), src->buf);
+	int iter_status;
+	unsigned int flags;
 
         mkdir_if_missing(dest->buf, 0777);
 
-        iter = dir_iterator_begin(src->buf);
+	flags = DIR_ITERATOR_PEDANTIC | DIR_ITERATOR_FOLLOW_SYMLINKS;
+	iter = dir_iterator_begin(src->buf, flags);
 
         if (!iter)
                 die_errno(_("failed to start iterator over '%s'"), src->buf);
@@ -465,11 +462,10 @@ static void copy_or_link_directory(struct strbuf *src, struct strbuf *dest,
 			die_errno(_("failed to copy file to '%s'"), dest->buf);
 	}
 
-        if (iter_status != ITER_DONE) {
-                strbuf_setlen(src, src_len);
-                die(_("failed to iterate over '%s'"), src->buf);
-        }
-	closedir(dir);
+	if (iter_status != ITER_DONE) {
+		strbuf_setlen(src, src_len);
+		die(_("failed to iterate over '%s'"), src->buf);
+	}
 }
 
 static void clone_local(const char *src_repo, const char *dest_repo)
@@ -487,7 +483,7 @@ static void clone_local(const char *src_repo, const char *dest_repo)
 		get_common_dir(&dest, dest_repo);
 		strbuf_addstr(&src, "/objects");
 		strbuf_addstr(&dest, "/objects");
-		copy_or_link_directory(&src, &dest, src_repo, src.len);
+		copy_or_link_directory(&src, &dest, src_repo);
 		strbuf_release(&src);
 		strbuf_release(&dest);
 	}
-- 
2.18.2

