From 81fa214244c6bcc7252085b26e0c3725568b98ae Mon Sep 17 00:00:00 2001
From: Alan Modra <amodra@gmail.com>
Date: Wed, 21 Dec 2022 21:40:12 +1030
Subject: [PATCH 03/12] CVE-2022-48065 The testcase in the PR had a variable
 with both DW_AT_decl_file and DW_AT_specification, where the
 DW_AT_specification also specified DW_AT_decl_file. This leads to a memory
 leak as the file name is malloced and duplicates are not expected.

 I've also changed find_abstract_instance to not use a temp for "name",
 because that can result in a change in behaviour from the usual last
 of duplicate attributes wins.

 	PR 29925
 	* dwarf2.c (find_abstract_instance): Delete "name" variable.
	Free *filename_ptr before assigning new file name.
	(scan_unit_for_symbols): Similarly free func->file and
	var->file before assigning.

Signed-off-by: Siddharth Doshi <sdoshi@mvista.com>
---
  bfd/dwarf2.c | 31 +++++++++++++++++++------------
  1 file changed, 19 insertions(+), 12 deletions(-)
---
 bfd/dwarf2.c | 13 +++++++------
 1 file changed, 7 insertions(+), 6 deletions(-)

diff --git a/bfd/dwarf2.c b/bfd/dwarf2.c
index 32a99dbdb39..2e20cd6b5b1 100644
--- a/bfd/dwarf2.c
+++ b/bfd/dwarf2.c
@@ -2912,7 +2912,6 @@ find_abstract_instance (struct comp_unit *unit,
   struct abbrev_info *abbrev;
   bfd_uint64_t die_ref = attr_ptr->u.val;
   struct attribute attr;
-  const char *name = NULL;
 
   if (recur_count == 100)
     {
@@ -3079,16 +3078,16 @@ find_abstract_instance (struct comp_unit *unit,
 		case DW_AT_name:
 		  /* Prefer DW_AT_MIPS_linkage_name or DW_AT_linkage_name
 		     over DW_AT_name.  */
-		  if (name == NULL && is_str_attr (attr.form))
+		  if (*pname == NULL && is_str_attr (attr.form))
 		    {
-		      name = attr.u.str;
+		      *pname = attr.u.str;
 		      if (non_mangled (unit->lang))
 			*is_linkage = TRUE;
 		    }
 		  break;
 		case DW_AT_specification:
 		  if (!find_abstract_instance (unit, &attr, recur_count + 1,
-					       &name, is_linkage,
+					       pname, is_linkage,
 					       filename_ptr, linenumber_ptr))
 		    return FALSE;
 		  break;
@@ -3098,13 +3097,14 @@ find_abstract_instance (struct comp_unit *unit,
 		     non-string forms into these attributes.  */
 		  if (is_str_attr (attr.form))
 		    {
-		      name = attr.u.str;
+		      *pname = attr.u.str;
 		      *is_linkage = TRUE;
 		    }
 		  break;
 		case DW_AT_decl_file:
 		  if (!comp_unit_maybe_decode_line_info (unit))
 		    return FALSE;
+         free (*filename_ptr);
 		  *filename_ptr = concat_filename (unit->line_table,
 						   attr.u.val);
 		  break;
@@ -3117,7 +3117,6 @@ find_abstract_instance (struct comp_unit *unit,
 	    }
 	}
     }
-  *pname = name;
   return TRUE;
 }
 
@@ -3369,6 +3368,7 @@ scan_unit_for_symbols (struct comp_unit *unit)
 		  break;
 
 		case DW_AT_decl_file:
+         free (func->file);
 		  func->file = concat_filename (unit->line_table,
 						attr.u.val);
 		  break;
@@ -3418,6 +3418,7 @@ scan_unit_for_symbols (struct comp_unit *unit)
 		  break;
 
 		case DW_AT_decl_file:
+         free (var->file);
 		  var->file = concat_filename (unit->line_table,
 					       attr.u.val);
 		  break;
-- 
2.24.4

