From 0590b09d9a34ae72741b91ec0708a820650198b0 Mon Sep 17 00:00:00 2001
From: Andrew Tridgell <andrew@tridgell.net>
Date: Wed, 18 Dec 2024 08:59:42 +1100
Subject: [PATCH] fixed symlink race condition in sender

when we open a file that we don't expect to be a symlink use
O_NOFOLLOW to prevent a race condition where an attacker could change
a file between being a normal file and a symlink

Upstream-Status: Backport [https://git.samba.org/?p=rsync.git;a=commit;h=0590b09d9a34ae72741b91ec0708a820650198b0]
CVE: CVE-2024-12747
Signed-off-by: Vijay Anusuri <vanusuri@mvista.com>
---
 checksum.c  |  2 +-
 generator.c |  2 +-
 receiver.c  |  2 +-
 sender.c    |  2 +-
 syscall.c   | 20 ++++++++++++++++++++
 t_unsafe.c  |  3 +++
 tls.c       |  3 +++
 trimslash.c |  2 ++
 util.c      |  2 +-
 9 files changed, 33 insertions(+), 5 deletions(-)

diff --git a/checksum.c b/checksum.c
index 583d15c..9bfc542 100644
--- a/checksum.c
+++ b/checksum.c
@@ -200,7 +200,7 @@ void file_checksum(const char *fname, const STRUCT_STAT *st_p, char *sum)
 
 	memset(sum, 0, MAX_DIGEST_LEN);
 
-	fd = do_open(fname, O_RDONLY, 0);
+	fd = do_open_checklinks(fname);
 	if (fd == -1)
 		return;
 
diff --git a/generator.c b/generator.c
index a112da6..179ac81 100644
--- a/generator.c
+++ b/generator.c
@@ -1821,7 +1821,7 @@ static void recv_generator(char *fname, struct file_struct *file, int ndx,
 	}
 
 	/* open the file */
-	if ((fd = do_open(fnamecmp, O_RDONLY, 0)) < 0) {
+	if ((fd = do_open_checklinks(fnamecmp)) < 0) {
 		rsyserr(FERROR, errno, "failed to open %s, continuing",
 			full_fname(fnamecmp));
 	  pretend_missing:
diff --git a/receiver.c b/receiver.c
index d6a8c8a..6e2f910 100644
--- a/receiver.c
+++ b/receiver.c
@@ -758,7 +758,7 @@ int recv_files(int f_in, int f_out, char *local_name)
 		if (fd1 == -1 && protocol_version < 29) {
 			if (fnamecmp != fname) {
 				fnamecmp = fname;
-				fd1 = do_open(fnamecmp, O_RDONLY, 0);
+				fd1 = do_open_nofollow(fnamecmp, O_RDONLY);
 			}
 
 			if (fd1 == -1 && basis_dir[0]) {
diff --git a/sender.c b/sender.c
index 03e4aad..23b836c 100644
--- a/sender.c
+++ b/sender.c
@@ -335,7 +335,7 @@ void send_files(int f_in, int f_out)
 			exit_cleanup(RERR_PROTOCOL);
 		}
 
-		fd = do_open(fname, O_RDONLY, 0);
+		fd = do_open_checklinks(fname);
 		if (fd == -1) {
 			if (errno == ENOENT) {
 				enum logcode c = am_daemon
diff --git a/syscall.c b/syscall.c
index 57edfbb..d7bdb60 100644
--- a/syscall.c
+++ b/syscall.c
@@ -44,6 +44,8 @@ extern int inplace;
 extern int preallocate_files;
 extern int preserve_perms;
 extern int preserve_executability;
+extern int copy_links;
+extern int copy_unsafe_links;
 
 #ifndef S_BLKSIZE
 # if defined hpux || defined __hpux__ || defined __hpux
@@ -654,3 +656,21 @@ cleanup:
 	return retfd;
 #endif // O_NOFOLLOW, O_DIRECTORY
 }
+
+/*
+  varient of do_open/do_open_nofollow which does do_open() if the
+  copy_links or copy_unsafe_links options are set and does
+  do_open_nofollow() otherwise
+
+  This is used to prevent a race condition where an attacker could be
+  switching a file between being a symlink and being a normal file
+
+  The open is always done with O_RDONLY flags
+*/
+int do_open_checklinks(const char *pathname)
+{
+	if (copy_links || copy_unsafe_links) {
+		return do_open(pathname, O_RDONLY, 0);
+	}
+	return do_open_nofollow(pathname, O_RDONLY);
+}
diff --git a/t_unsafe.c b/t_unsafe.c
index a8d4bed..d44bf7e 100644
--- a/t_unsafe.c
+++ b/t_unsafe.c
@@ -31,6 +31,9 @@ int list_only = 0;
 int human_readable = 0;
 int preserve_perms = 0;
 int preserve_executability = 0;
+int copy_links = 0;
+int copy_unsafe_links = 0;
+
 short info_levels[COUNT_INFO], debug_levels[COUNT_DEBUG];
 
 int
diff --git a/tls.c b/tls.c
index 4ffca33..a065b1e 100644
--- a/tls.c
+++ b/tls.c
@@ -53,6 +53,9 @@ int preserve_perms = 0;
 int preserve_executability = 0;
 int preallocate_files = 0;
 int inplace = 0;
+int safe_symlinks = 0;
+int copy_links = 0;
+int copy_unsafe_links = 0;
 
 #ifdef SUPPORT_XATTRS
 
diff --git a/trimslash.c b/trimslash.c
index 7c65205..4b799eb 100644
--- a/trimslash.c
+++ b/trimslash.c
@@ -30,6 +30,8 @@ int preserve_perms = 0;
 int preserve_executability = 0;
 int preallocate_files = 0;
 int inplace = 0;
+int copy_links = 0;
+int copy_unsafe_links = 0;
 
 int
 main(int argc, char **argv)
diff --git a/util.c b/util.c
index c4732a5..6698e30 100644
--- a/util.c
+++ b/util.c
@@ -335,7 +335,7 @@ int copy_file(const char *source, const char *dest, int ofd, mode_t mode)
 	int len;   /* Number of bytes read into `buf'. */
 	OFF_T prealloc_len = 0, offset = 0;
 
-	if ((ifd = do_open(source, O_RDONLY, 0)) < 0) {
+	if ((ifd = do_open_nofollow(source, O_RDONLY)) < 0) {
 		int save_errno = errno;
 		rsyserr(FERROR_XFER, errno, "open %s", full_fname(source));
 		errno = save_errno;
-- 
2.18.1

