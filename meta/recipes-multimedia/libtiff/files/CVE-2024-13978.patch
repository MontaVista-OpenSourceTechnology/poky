From 2ebfffb0e8836bfb1cd7d85c059cd285c59761a4
Author: Lee Howard <faxguy@howardsilvan.com>
Date:   Sat Oct 5 09:45:30 2024 -0700

    Check TIFFTAG_TILELENGTH and TIFFTAGTILEWIDTH for valid input, addresses issue #650

From 7be20ccaab97455f192de0ac561ceda7cd9e12d1
Author: Lee Howard <faxguy@howardsilvan.com>
Date:   Fri Sep 27 11:21:57 2024 -0700

    Fix issue #649 in fax2ps caused by regression in commit https://gitlab.com/libtiff/libtiff/-/commit/28c38d648b64a66c3218778c4745225fe3e3a06d where TIFFTAG_FAXFILLFUNC is being used rather than an output buffer.

Upstream-Status: Backport from [https://gitlab.com/libtiff/libtiff/-/commit/2ebfffb0e8836bfb1cd7d85c059cd285c59761a4, https://github.com/libsdl-org/libtiff/commit/23194d8dc110435a6f032a244e3c2b28737b9ffd]
CVE: CVE-2024-13978
Signed-off-by: Milan Satpathy <msatpathy@mvista.com>
---
 libtiff/tif_read.c | 53 ++++++++++++++++++++++++++++++++++++++--------
 tools/tiff2pdf.c   | 16 ++++++++++++++
 2 files changed, 60 insertions(+), 9 deletions(-)

diff --git a/libtiff/tif_read.c b/libtiff/tif_read.c
index 527fadd..80e3390 100644
--- a/libtiff/tif_read.c
+++ b/libtiff/tif_read.c
@@ -477,6 +477,12 @@ TIFFReadScanline(TIFF* tif, void* buf, uint32 row, uint16 sample)
 			(*tif->tif_postdecode)(tif, (uint8*) buf,
 			    tif->tif_scanlinesize);  
 	}
+        else
+        {
+            /* See TIFFReadEncodedStrip comment regarding TIFFTAG_FAXFILLFUNC. */
+            if (buf)
+                memset(buf, 0, (size_t)tif->tif_scanlinesize);
+        }
 	return (e > 0 ? 1 : -1);
 }
 
@@ -554,8 +560,14 @@ TIFFReadEncodedStrip(TIFF* tif, uint32 strip, void* buf, tmsize_t size)
 
 	if ((size!=(tmsize_t)(-1))&&(size<stripsize))
 		stripsize=size;
-	if (!TIFFFillStrip(tif,strip))
-		return((tmsize_t)(-1));
+        if (!TIFFFillStrip(tif, strip))
+        {
+            /* The output buf may be NULL, in particular if TIFFTAG_FAXFILLFUNC
+               is being used. Thus, memset must be conditional on buf not NULL. */
+            if (buf)
+                memset(buf, 0, (size_t)stripsize);
+            return ((tmsize_t)(-1));
+        }
 	if ((*tif->tif_decodestrip)(tif,buf,stripsize,plane)<=0)
 		return((tmsize_t)(-1));
 	(*tif->tif_postdecode)(tif,buf,stripsize);
@@ -1558,9 +1570,17 @@ int      TIFFReadFromUserBuffer(TIFF* tif, uint32 strile,
 
     if( TIFFIsTiled(tif) )
     {
-        if( !TIFFStartTile(tif, strile) ||
-            !(*tif->tif_decodetile)(tif, (uint8*) outbuf, outsize, 
-                                    (uint16)(strile/td->td_stripsperimage)) )
+        if( !TIFFStartTile(tif, strile))
+        {
+            ret = 0;
+            /* See related TIFFReadEncodedStrip comment. */
+            if (outbuf)
+                memset(outbuf, 0, (size_t)outsize);
+        }
+
+        else if(!(*tif->tif_decodetile)(
+                     tif, (uint8*) outbuf, outsize,
+                     (uint16)(strile/td->td_stripsperimage)) )
         {
             ret = 0;
         }
@@ -1571,13 +1591,28 @@ int      TIFFReadFromUserBuffer(TIFF* tif, uint32 strile,
         uint32 stripsperplane;
         if (rowsperstrip>td->td_imagelength)
             rowsperstrip=td->td_imagelength;
-        stripsperplane= TIFFhowmany_32_maxuint_compat(td->td_imagelength, rowsperstrip);
-        if( !TIFFStartStrip(tif, strile) ||
-            !(*tif->tif_decodestrip)(tif, (uint8*) outbuf, outsize, 
-                                     (uint16)(strile/stripsperplane)) )
+        if (rowsperstrip == 0)
         {
+            TIFFErrorExt(tif->tif_clientdata, module, "rowsperstrip is zero");
             ret = 0;
         }
+
+        else
+        {
+            stripsperplane= TIFFhowmany_32_maxuint_compat(td->td_imagelength, rowsperstrip);
+            if( !TIFFStartStrip(tif, strile))
+            {
+                ret = 0;
+                /* See related TIFFReadEncodedStrip comment. */
+                if (outbuf)
+                    memset(outbuf, 0, (size_t)outsize);
+            }
+            else if (!(*tif->tif_decodestrip)(tif, (uint8*) outbuf, outsize, 
+                                     (uint16)(strile/stripsperplane)))
+            {
+                ret = 0;
+            }
+        }
     }
     if( ret )
     {
diff --git a/tools/tiff2pdf.c b/tools/tiff2pdf.c
index f7f1c6a..e755e81 100644
--- a/tools/tiff2pdf.c
+++ b/tools/tiff2pdf.c
@@ -1240,9 +1240,25 @@ void t2p_read_tiff_init(T2P* t2p, TIFF* input){
 			TIFFGetField(input, 
 				TIFFTAG_TILEWIDTH, 
 				&( t2p->tiff_tiles[i].tiles_tilewidth) );
+			if (t2p->tiff_tiles[i].tiles_tilewidth < 1)
+			{
+				TIFFError(TIFF2PDF_MODULE, "Invalid tile width (%d), %s",
+					t2p->tiff_tiles[i].tiles_tilewidth,
+					TIFFFileName(input));
+				t2p->t2p_error = T2P_ERR_ERROR;
+				return;
+			}
 			TIFFGetField(input, 
 				TIFFTAG_TILELENGTH, 
 				&( t2p->tiff_tiles[i].tiles_tilelength) );
+			if (t2p->tiff_tiles[i].tiles_tilelength < 1)
+			{
+				TIFFError(TIFF2PDF_MODULE, "Invalid tile length (%d), %s",
+					t2p->tiff_tiles[i].tiles_tilelength,
+					TIFFFileName(input));
+				t2p->t2p_error = T2P_ERR_ERROR;
+				return;
+			}
 			t2p->tiff_tiles[i].tiles_tiles = 
 			(T2P_TILE*) _TIFFmalloc(TIFFSafeMultiply(tmsize_t,t2p->tiff_tiles[i].tiles_tilecount,
                                                                  sizeof(T2P_TILE)) );
-- 
2.34.1

