From 2a9a0c4b6cfeb240d6ce9e788410ee08c52491dc Mon Sep 17 00:00:00 2001
From: Vivek Kumbhar <vkumbhar@mvista.com>
Date: Mon, 28 Nov 2022 11:28:54 +0000
Subject: [PATCH] CVE-2021-3580

---
 ChangeLog                    |  8 ++++++++
 rsa-decrypt-tr.c             |  4 ++++
 rsa-decrypt.c                | 19 +++++++++++++++++++
 rsa.h                        |  5 +++--
 testsuite/rsa-encrypt-test.c | 26 +++++++++++++++++++++++++-
 5 files changed, 59 insertions(+), 3 deletions(-)

diff --git a/ChangeLog b/ChangeLog
index ae0abf2..e35cdd3 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,3 +1,11 @@
+2021-05-17  Niels Möller  <nisse@lysator.liu.se>
+
+	* rsa-decrypt-tr.c (rsa_decrypt_tr): Check up-front that input is
+	in range.
+	* rsa-sec-decrypt.c (rsa_sec_decrypt): Likewise.
+	* rsa-decrypt.c (rsa_decrypt): Likewise.
+	* testsuite/rsa-encrypt-test.c (test_main): Add tests with input > n.
+
 2016-10-01  Niels Möller  <nisse@lysator.liu.se>
 
 	* Released nettle-3.3.
diff --git a/rsa-decrypt-tr.c b/rsa-decrypt-tr.c
index e4fbc5f..a5e3c1d 100644
--- a/rsa-decrypt-tr.c
+++ b/rsa-decrypt-tr.c
@@ -50,6 +50,10 @@ rsa_decrypt_tr(const struct rsa_public_key *pub,
 {
   mpz_t m;
   int res;
+  
+  /* First check that input is in range. */
+  if (mpz_sgn (gibberish) < 0 || mpz_cmp (gibberish, pub->n) >= 0)
+    return 0;
 
   mpz_init_set(m, gibberish);
 
diff --git a/rsa-decrypt.c b/rsa-decrypt.c
index 7681439..b622f8b 100644
--- a/rsa-decrypt.c
+++ b/rsa-decrypt.c
@@ -47,7 +47,26 @@ rsa_decrypt(const struct rsa_private_key *key,
   mpz_t m;
   int res;
 
+  /* First check that input is in range. Since we don't have the
+     public key available here, we need to reconstruct n. */
+  mpz_mul (m, key->p, key->q);
+  if (mpz_sgn (gibberish) < 0 || mpz_cmp (gibberish, m) >= 0)
+    {
+      mpz_clear (m);
+      return 0;
+    }
+
   mpz_init(m);
+
+  /* First check that input is in range. Since we don't have the
+     public key available here, we need to reconstruct n. */
+  mpz_mul (m, key->p, key->q);
+  if (mpz_sgn (gibberish) < 0 || mpz_cmp (gibberish, m) >= 0)
+    {
+      mpz_clear (m);
+      return 0;
+    }
+
   rsa_compute_root(key, m, gibberish);
 
   res = pkcs1_decrypt (key->size, m, length, message);
diff --git a/rsa.h b/rsa.h
index 6d2574b..6230e10 100644
--- a/rsa.h
+++ b/rsa.h
@@ -373,13 +373,14 @@ rsa_decrypt_tr(const struct rsa_public_key *pub,
 	       size_t *length, uint8_t *message,
 	       const mpz_t gibberish);
 
-/* Compute x, the e:th root of m. Calling it with x == m is allowed. */
+/* Compute x, the e:th root of m. Calling it with x == m is allowed.
+   It is required that 0 <= m < n. */
 void
 rsa_compute_root(const struct rsa_private_key *key,
 		 mpz_t x, const mpz_t m);
 
 /* Safer variant, using RSA blinding, and checking the result after
-   CRT. */
+   CRT. It is required that 0 <= m < n. */
 int
 rsa_compute_root_tr(const struct rsa_public_key *pub,
 		    const struct rsa_private_key *key,
diff --git a/testsuite/rsa-encrypt-test.c b/testsuite/rsa-encrypt-test.c
index 93053a7..5df26d5 100644
--- a/testsuite/rsa-encrypt-test.c
+++ b/testsuite/rsa-encrypt-test.c
@@ -19,10 +19,12 @@ test_main(void)
   uint8_t after;
 
   mpz_t gibberish;
-
+  mpz_t bad_input;
+  
   rsa_private_key_init(&key);
   rsa_public_key_init(&pub);
   mpz_init(gibberish);
+  mpz_init(bad_input);
 
   knuth_lfib_init(&lfib, 17);
   
@@ -50,7 +52,9 @@ test_main(void)
   decrypted_length = msg_length - 1;
   ASSERT(!rsa_decrypt(&key, &decrypted_length, decrypted, gibberish));
 
+  mpz_set_ui (bad_input, 0);
   decrypted_length = msg_length;
+  ASSERT(!rsa_decrypt(&key, &decrypted_length, decrypted, bad_input));
   ASSERT(rsa_decrypt(&key, &decrypted_length, decrypted, gibberish));
   ASSERT(decrypted_length == msg_length);
   ASSERT(MEMEQ(msg_length, msg, decrypted));
@@ -74,6 +78,25 @@ test_main(void)
 			&decrypted_length, decrypted, gibberish));
   ASSERT(decrypted_length == msg_length);
   ASSERT(MEMEQ(msg_length, msg, decrypted));
+    ASSERT(decrypted_length == msg_length);
+
+  /* Test input that is slightly larger than n */
+  mpz_add(bad_input, gibberish, pub.n);
+  decrypted_length = msg_length;
+  ASSERT(!rsa_decrypt(&key, &decrypted_length, decrypted, bad_input));
+  ASSERT(!rsa_decrypt_tr(&pub, &key,
+			 &lfib, (nettle_random_func *) knuth_lfib_random,
+			 &decrypted_length, decrypted, bad_input));
+  ASSERT(decrypted_length == msg_length);
+
+  /* Test input that is considerably larger than n */
+  mpz_mul_2exp (bad_input, pub.n, 100);
+  mpz_add (bad_input, bad_input, gibberish);
+  decrypted_length = msg_length;
+  ASSERT(!rsa_decrypt(&key, &decrypted_length, decrypted, bad_input));
+  ASSERT(!rsa_decrypt_tr(&pub, &key,
+			 &lfib, (nettle_random_func *) knuth_lfib_random,
+			 &decrypted_length, decrypted, bad_input));
   ASSERT(decrypted[msg_length] == after);
 
   /* Test invalid key. */
@@ -86,6 +109,7 @@ test_main(void)
   rsa_private_key_clear(&key);
   rsa_public_key_clear(&pub);
   mpz_clear(gibberish);
+  mpz_clear(bad_input);
   free(decrypted);
 }
   
-- 
2.18.2

