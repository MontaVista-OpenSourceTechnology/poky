From 6133b3cb7d042d1c849ac0a1caa480b7c1483ae0 Mon Sep 17 00:00:00 2001
From: Vijay Anusuri <vanusuri@mvista.com>
Date: Mon, 3 Oct 2022 06:34:19 +0000
Subject: [PATCH] openssl: don't leak the SRP credentials in redirects either

Follow-up to 620ea21410030a9977396b4661806bc187231b79

Reported-by: Harry Sintonen
Closes #8751

Upstream-Status: Backport from https://github.com/curl/curl/commit/139a54ed0a172adaaf1a78d6f4fff50b2c3f9e08
CVE: CVE-2022-27774
Signed-off-by: Vijay Anusuri <vanusuri@mvista.com>
---
 lib/http.c         | 10 +++++-----
 lib/http.h         |  6 ++++++
 lib/vtls/openssl.c |  3 ++-
 3 files changed, 13 insertions(+), 6 deletions(-)

diff --git a/lib/http.c b/lib/http.c
index f6ca5bd..a6e2f22 100644
--- a/lib/http.c
+++ b/lib/http.c
@@ -640,10 +640,10 @@ output_auth_headers(struct connectdata *conn,
 }
 
 /*
- * allow_auth_to_host() tells if autentication, cookies or other "sensitive
- * data" can (still) be sent to this host.
+ * Curl_allow_auth_to_host() tells if authentication, cookies or other
+ * "sensitive data" can (still) be sent to this host.
  */
-static bool allow_auth_to_host(struct connectdata *conn)
+bool Curl_allow_auth_to_host(struct connectdata *conn)
 {
   struct Curl_easy *data = conn->data;
   return (!data->state.this_is_a_follow ||
@@ -724,7 +724,7 @@ Curl_http_output_auth(struct connectdata *conn,
 
   /* To prevent the user+password to get sent to other than the original host
      due to a location-follow */
-  if(allow_auth_to_host(conn)
+  if(Curl_allow_auth_to_host(conn)
      || conn->bits.netrc)
     result = output_auth_headers(conn, authhost, request, path, FALSE);
   else
@@ -1649,7 +1649,7 @@ CURLcode Curl_add_custom_headers(struct connectdata *conn,
                    checkprefix("Cookie:", headers->data)) &&
                   /* be careful of sending this potentially sensitive header to
                      other hosts */
-                  !allow_auth_to_host(conn))
+                  !Curl_allow_auth_to_host(conn))
             ;
           else {
             CURLcode result = Curl_add_bufferf(req_buffer, "%s\r\n",
diff --git a/lib/http.h b/lib/http.h
index d2781bc..da84c40 100644
--- a/lib/http.h
+++ b/lib/http.h
@@ -257,5 +257,11 @@ Curl_http_output_auth(struct connectdata *conn,
                       bool proxytunnel); /* TRUE if this is the request setting
                                             up the proxy tunnel */
 
+/*
+ * Curl_allow_auth_to_host() tells if authentication, cookies or other
+ * "sensitive data" can (still) be sent to this host.
+ */
+bool Curl_allow_auth_to_host(struct connectdata *conn);
+
 #endif /* HEADER_CURL_HTTP_H */
 
diff --git a/lib/vtls/openssl.c b/lib/vtls/openssl.c
index 845dbcd..b784bb1 100644
--- a/lib/vtls/openssl.c
+++ b/lib/vtls/openssl.c
@@ -2338,7 +2338,8 @@ static CURLcode ossl_connect_step1(struct connectdata *conn, int sockindex)
   }
 
 #ifdef USE_TLS_SRP
-  if(ssl_authtype == CURL_TLSAUTH_SRP) {
+  if((ssl_authtype == CURL_TLSAUTH_SRP) &&
+     Curl_allow_auth_to_host(conn)) {
     char * const ssl_username = SSL_SET_OPTION(username);
 
     infof(data, "Using TLS-SRP username: %s\n", ssl_username);
-- 
2.18.2

