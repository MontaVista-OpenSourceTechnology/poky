From cf15c4f2eae7040705d891116951017c2a97a5e2 Mon Sep 17 00:00:00 2001
From: Billy Brumley <bbrumley@gmail.com>
Date: Mon, 20 Jul 2020 22:18:45 +0000
Subject: [PATCH] Bug 1631573: Remove unnecessary scalar padding in ec.c
 r=kjacobs,bbeurdouche

Subsequent calls to ECPoints_mul and ECPoint_mul remove this padding.

Timing attack countermeasures are now applied more generally deeper in
the call stack.

Differential Revision: https://phabricator.services.mozilla.com/D82011

--HG--
extra : moz-landing-system : lando
---
 nss/lib/freebl/ec.c | 21 ---------------------
 1 file changed, 21 deletions(-)

Index: nss-3.31.1/nss/lib/freebl/ec.c
===================================================================
--- nss-3.31.1.orig/nss/lib/freebl/ec.c
+++ nss-3.31.1/nss/lib/freebl/ec.c
@@ -742,27 +742,6 @@ ECDSA_SignDigestWithSeed(ECPrivateKey *k
     }
 
     /*
-    ** We do not want timing information to leak the length of k,
-    ** so we compute k*G using an equivalent scalar of fixed
-    ** bit-length.
-    ** Fix based on patch for ECDSA timing attack in the paper
-    ** by Billy Bob Brumley and Nicola Tuveri at
-    **   http://eprint.iacr.org/2011/232
-    **
-    ** How do we convert k to a value of a fixed bit-length?
-    ** k starts off as an integer satisfying 0 <= k < n.  Hence,
-    ** n <= k+n < 2n, which means k+n has either the same number
-    ** of bits as n or one more bit than n.  If k+n has the same
-    ** number of bits as n, the second addition ensures that the
-    ** final value has exactly one more bit than n.  Thus, we
-    ** always end up with a value that exactly one more bit than n.
-    */
-    CHECK_MPI_OK(mp_add(&k, &n, &k));
-    if (mpl_significant_bits(&k) <= mpl_significant_bits(&n)) {
-        CHECK_MPI_OK(mp_add(&k, &n, &k));
-    }
-
-    /*
     ** ANSI X9.62, Section 5.3.2, Step 2
     **
     ** Compute kG
