Backport of:

From c313849c2e5133802e21b13fa0b141b360171d39 Mon Sep 17 00:00:00 2001
From: Christian Persch <chpe@src.gnome.org>
Date: Sun, 2 Jun 2024 19:19:35 +0200
Subject: [PATCH] widget: Add safety limit to widget size requests

https://gitlab.gnome.org/GNOME/vte/-/issues/2786
(cherry picked from commit 1803ba866053a3d7840892b9d31fe2944a183eda)

Upstream-Status: Backport [import from ubuntu https://git.launchpad.net/ubuntu/+source/vte2.91/tree/debian/patches/CVE-2024-37535-2.patch?h=ubuntu/focal-security
Upstream commit https://gitlab.gnome.org/GNOME/vte/-/commit/c313849c2e5133802e21b13fa0b141b360171d39]
CVE: CVE-2024-37535
Signed-off-by: Vijay Anusuri <vanusuri@mvista.com>
---
 src/vtegtk.cc | 35 +++++++++++++++++++++++++++++++++++
 1 file changed, 35 insertions(+)

--- a/src/vtegtk.cc
+++ b/src/vtegtk.cc
@@ -72,6 +72,38 @@
 
 #define VTE_TERMINAL_CSS_NAME "vte-terminal"
 
+static inline void
+sanitise_widget_size_request(int* minimum,
+                             int* natural) noexcept
+{
+        // Overly large size requests will make gtk happily allocate
+        // a window size over the window system's limits (see
+        // e.g. https://gitlab.gnome.org/GNOME/vte/-/issues/2786),
+        // leading to aborting the whole process.
+        // The toolkit should be in a better position to know about
+        // these limits and not exceed them (which here is certainly
+        // possible since our minimum sizes are very small), let's
+        // limit the widget's size request to some large value
+        // that hopefully is within the absolute limits of
+        // the window system (assumed here to be int16 range,
+        // and leaving some space for the widgets that contain
+        // the terminal).
+        auto const limit = (1 << 15) - (1 << 12);
+
+        if (*minimum > limit || *natural > limit) {
+                static auto warned = false;
+
+                if (!warned) {
+                        g_warning("Widget size request (minimum %d, natural %d) exceeds limits\n",
+                                  *minimum, *natural);
+                        warned = true;
+                }
+        }
+
+        *minimum = std::min(*minimum, limit);
+        *natural = std::clamp(*natural, *minimum, limit);
+}
+
 struct _VteTerminalClassPrivate {
         GtkStyleProvider *style_provider;
 };
@@ -295,6 +327,7 @@ vte_terminal_get_preferred_width(GtkWidg
 {
 	VteTerminal *terminal = VTE_TERMINAL(widget);
         WIDGET(terminal)->get_preferred_width(minimum_width, natural_width);
+        sanitise_widget_size_request(minimum_width, natural_width);
 }
 
 static void
@@ -304,6 +337,7 @@ vte_terminal_get_preferred_height(GtkWid
 {
 	VteTerminal *terminal = VTE_TERMINAL(widget);
         WIDGET(terminal)->get_preferred_height(minimum_height, natural_height);
+        sanitise_widget_size_request(minimum_height, natural_height);
 }
 
 static void
